<?xml version="1.0" encoding="UTF-8"?>
<!-- 
This file is protected by Copyright. Please refer to the COPYRIGHT file distributed with this 
source distribution.

This file is part of REDHAWK Basic Components unwrap.

REDHAWK Basic Components HardLimit is free software: you can redistribute it and/or modify it under the terms of 
the GNU Lesser General Public License as published by the Free Software Foundation, either 
version 3 of the License, or (at your option) any later version.

REDHAWK Basic Components HardLimit is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
PURPOSE.  See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this 
program.  If not, see http://www.gnu.org/licenses/.
-->
<!DOCTYPE softpkg PUBLIC "-//JTRS//DTD SCA V2.2.2 SPD//EN" "softpkg.dtd">
<softpkg id="DCE:6ecb6e6c-19af-4890-b777-4328c7036c70" name="unwrap" type="sca_compliant">
  <title></title>
  <author>
    <name>null</name>
  </author>
  <description>Unwrap output values to avoid discontinuities in the input at values assigned by properties Val1, Val2.  

The standard use case is for phase unmapping.  Phase of a complex number is computed using arg, or atan2.  This produces outputs in the range of [-pi,pi].  However the solution of the arctangent is not unique.  arg(theta) = arg(theta+2pi*x) for any integer x.  

Unwrap seeks to adress this ambiguity by using a differencing algorthim.  Given the default properties of +/-pi, any value x between +/- pi also could be mapped to x+2pi or x -2pi.  Unwrap uses the previous value to see which of these three values is the closest and selects the output accordingly.  Thus a series like [.85pi, .95pi, -.05pi, -.15pi] is &quot;unwrapped&quot; at the pi boundary and mapped to the output [.85pi, .95pi, 1.05pi, 1.15pi].

NOTE - the algorthim used to do the unmapping fails if the phase jumps are greater then abs(Val1-Val2)/2.0.  The &quot;unwrap&quot; algorithm chooses the &quot;closest&quot; value to the last value.  If the &quot;desired value&quot; is not the closest one this unwrapping techinque breaks down and a different unwrapping algorithm using additional apriori knowledge of the data set should be used instead.

Complex data is transformed to real data prior to unwrapping using the transformation defined by the property cxOperator.

Finally - if the input is NOT limited to the range [Val1, Val2], then the value is mapped to its prinicpal value between [Val1, Val2] and then remapped to an output value based upon the differencing algorthim.  This may result in unintuitive behavior.</description>
  <propertyfile type="PRF">
    <localfile name="unwrap.prf.xml"/>
  </propertyfile>
  <descriptor>
    <localfile name="unwrap.scd.xml"/>
  </descriptor>
  <implementation id="cpp">
    <description>The implementation contains descriptive information about the template for a software component.</description>
    <code type="Executable">
      <localfile name="cpp/unwrap"/>
      <entrypoint>cpp/unwrap</entrypoint>
    </code>
    <compiler name="/usr/bin/gcc" version="4.1.2"/>
    <programminglanguage name="C++"/>
    <humanlanguage name="EN"/>
    <os name="Linux"/>
    <processor name="x86"/>
    <processor name="x86_64"/>
  </implementation>
</softpkg>
